{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ApiUserComment": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiDefaultResponseStatusEnum": {
				"type": "string",
				"enum": [
					"OK",
					"ERROR",
					"REQUEST_BODY_ERROR",
					"VALIDATION_ERROR",
					"TOO_MANY_REQUESTS",
					"UNAUTHORIZED",
					"AUTH_ERROR",
					"UPSTREAM_HTTP_ERROR",
					"INVALID_REQUEST",
					"NOT_IMPLEMENTED",
					"PENDING"
				],
				"description": "All possible values of status."
			},
			"ApiValidationErrorDetails": {
				"properties": {
					"className": {
						"type": "string"
					},
					"fieldErrors": {
						"properties": {},
						"additionalProperties": {
							"type": "string"
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ApiUserComment_": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/ApiUserComment"
					},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_any_": {
				"properties": {
					"data": {},
					"errorDetails": {
						"type": "string",
						"description": "Optional details for unexpected error responses."
					},
					"errorMessage": {
						"type": "string",
						"description": "Simple message to explain client developers the reason for error."
					},
					"status": {
						"$ref": "#/components/schemas/ApiDefaultResponseStatusEnum",
						"description": "Response status. OK for successful reponses."
					},
					"validationErrorDetails": {
						"$ref": "#/components/schemas/ApiValidationErrorDetails"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "ts-backend",
		"version": "1.0.0",
		"description": "TSOA based backend with dependency injection and TypeORM",
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/demo-message": {
			"get": {
				"operationId": "DemoMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ApiUserComment_"
								}
							}
						}
					}
				},
				"tags": [
					"Demo"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/create": {
			"post": {
				"operationId": "CreateUserComment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"Demo"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ApiUserComment"
							}
						}
					}
				}
			}
		},
		"/api/get-comments/{user}": {
			"get": {
				"operationId": "GetUserComments",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_any_"
								}
							}
						}
					}
				},
				"tags": [
					"Demo"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "user",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}